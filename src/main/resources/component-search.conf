#
# Made with all the love in the world
# by scireum in Remshalden, Germany
#
# Copyright by scireum GmbH
# http://www.scireum.de - info@scireum.de
#

sirius.frameworks {
    # Provides cluster wide locks utilizing Elasticsearch. Disable this framework if you're not using this feature
    # and don't want the extra index to be created
    search.locks = true
}

# Adding the search module to the list of known modules...
product {
    modules {
        sirius-search {
            version = "${project.version}"
            build = "${build.number}"
            date = "${timestamp}"
            vcs = "${build.vcs.number}"
        }
    }
}


# Configures the access to elasticsearch
index {

    # Determines the type of the elastic search cluster: server, embedded or in-memory
    type = "server"

    # Determines the node to connect to
    host = "localhost"

    # Determines the port used
    port = 9300

    # Determines the cluster to connect to
    cluster = ""

    # Determines the prefix appended to all index names - permits to run the same application several times on the
    # same cluster
    prefix = ""

    # Should mappings be updated on system startup?
    updateSchema = false

    # Should all changes be recorded to trace and report optimistic locking errors?
    traceOptimisticLockErrors = false

    # Contains a configuration per index
    settings {

        # Contains the default config
        default {
            # This reflects the default config of Elasticsearch - 5 shards with 2 copies (primary and 1 replica)
            numberOfShards = 5
            numberOfReplicas = 1
        }

    }

}

cache {

    entity-cache {
        maxSize = 100
        ttl = 1 minute
    }

}

async.executor {

    # Maintains referential integrity of the elasticsearch index
    index-ref-integrity {
        poolSize = 2
        queueLength = 0
    }

}

health {

    # These values are "best guesses" and monitor the elasticsearch cluster as well
    # as the load on the current node
    limits {
        # Number of calls to Index.blockThreadForUpdate
        index-blocks.gray = 60
        index-blocks.warning = 0
        index-blocks.error = 0

        # Number of calls to Index.callAfterUpdate
        index-delays.gray = 60
        index-delays.warning = 0
        index-delays.error = 0

        # Number of items in the delay line (Index.callAfterUpdate)
        # Once this queue reaches 100 elements, it will switch over to Index.blockThreadForUpdate.
        index-delay-line.gray = 25
        index-delay-line.warning = 80
        index-delay-line.error = 100

        # Average query duration in milliseconds
        index-queryDuration.gray = 100
        index-queryDuration.warning = 250
        index-queryDuration.error = 0

        # Number of queries per minute
        index-queries.gray = 100
        index-queries.warning = 15000
        index-queries.error = 0

        # Optimistic lock errors per minute
        index-locking-errors.gray = 5
        index-locking-errors.warning = 25
        index-locking-errors.error = 0
    }

}